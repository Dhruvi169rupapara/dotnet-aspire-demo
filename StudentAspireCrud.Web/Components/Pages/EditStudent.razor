@page "/edit-student/{studentId}"
@using static StudentAspireCrud.Web.StudentApiClient
@inject StudentApiClient StudentApi
@rendermode InteractiveServer
@using StudentAspireCrud.Web.Models
@inject NavigationManager NavigationManager

<div class="my-3">
    <div class="d-flex flex-column align-items-center justify-content-center h-100">
        <div class="bg-white p-2 rounded-3 mb-3 w-50">
            <p class="m-0 d-flex align-items-center gap-3">
                <span class="m-0" @onclick='() => NavigationManager.NavigateTo("/")'><img class="cursor-pointer" src="icon/bback.png" /></span>
                <span class="m-0 fw-bold fs-5">Update student</span>
            </p>
        </div>
        <div class="bg-white rounded-3 p-4 w-50">
            <EditForm Model="_addStudent" FormName="addStudent" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="First name" @bind-value="_addStudent.FirstName" />
                    <ValidationMessage For="@(() => _addStudent.FirstName)" />
                </div>
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="Last name" @bind-value="_addStudent.LastName" />
                    <ValidationMessage For="@(() => _addStudent.LastName)" />
                </div>
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="Age" @bind-value="_addStudent.Age" />
                    <ValidationMessage For="@(() => _addStudent.Age)" />
                </div>
                <div class="text-center">
                    <button class="btn btn-dark w-100 py-2" type="submit">Update</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string studentId { get; set; }
    Student _student = new();
    AddStudentModel _addStudent = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(studentId))
        {
            _student = await StudentApi.GetStudentById(studentId);
            if (_student != null)
            {
                _addStudent.FirstName = _student.FirstName;
                _addStudent.LastName = _student.LastName;
                _addStudent.Age = _student.Age.ToString();
            }
        }
    }

    private async Task HandleSubmit()
    {
        // var response = await StudentApi.UpdateStudent(_student.StudentId, _addStudent);
        // if (response != null)
        // {
        //     NavigationManager.NavigateTo("/");
        // }
        Console.WriteLine("Edit submit");
    }
}